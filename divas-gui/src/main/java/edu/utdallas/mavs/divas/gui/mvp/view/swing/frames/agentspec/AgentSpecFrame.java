/*package edu.utdallas.mavs.divas.gui.mvp.view.swing.frames.agentspec;

import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JPanel;
import javax.swing.JScrollPane;

import org.apache.xmlbeans.XmlOptions;

import com.jme3.system.AppSettings;
import com.jme3.system.JmeCanvasContext;

import divas.spec.agent.AgentAttribute;
import divas.spec.agent.AgentSpecDocument;
import divas.spec.agent.AgentSpecDocument.AgentSpec;
import divas.spec.agent.DivasAttribute;
import divas.spec.agent.DivasTask;
import divas.spec.agent.MetaAgentDocument;
import divas.spec.agent.MetaAgentDocument.MetaAgent;
import edu.utdallas.mavs.divas.gui.mvp.view.swing.frames.agentspec.MetaAgentSpecFrame.DivasAttributeType;
import edu.utdallas.mavs.divas.utils.ResourceManager;

public class AgentSpecFrame extends javax.swing.JFrame
{
    private static final long                         serialVersionUID = -8296827229736960394L;

    private static ModelCanvasApplication             app              = new ModelCanvasApplication();
    private static File                               metaSpecFolder;
    private static File                               agentSpecFolder;
    private boolean                                   populating       = false;
    private Vector<Inputbox>                          inputs;
    private AgentSpecDocument                         asDoc;
    private AgentSpec                                 as;
    private static HashMap<String, MetaAgent>         metaAgentTypes   = new HashMap<String, MetaAgent>();
    private HashMap<String, AgentSpec>                agentSpecBoxList = new HashMap<String, AgentSpec>();
    private static HashMap<String, MetaAgentDocument> metaSpecDocs     = new HashMap<String, MetaAgentDocument>();
    private static HashMap<String, AgentSpecDocument> agentSpecsDocs   = new HashMap<String, AgentSpecDocument>();
    private static HashMap<String, Object>            inputBoxes       = new HashMap<String, Object>();
    private HashMap<String, AgentAttribute>           agentAttrHashMap;

    *//** Creates new form AgentSpecFrame *//*
    public AgentSpecFrame()
    {
        // disable jme3 logging (used by jme)
        java.util.logging.Logger.getLogger("").setLevel(java.util.logging.Level.WARNING);
        initComponents();
    }

    *//**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     *//*

    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        agentType = new javax.swing.JComboBox<String>();
        jScrollPane1 = new javax.swing.JScrollPane();
        agentSpecName = new javax.swing.JTextArea();
        agentSpecBox = new javax.swing.JComboBox<String>();
        myTabs = new javax.swing.JTabbedPane();
        modelTab = new javax.swing.JScrollPane();
        actionsTab = new javax.swing.JScrollPane();
        physicalTab = new javax.swing.JScrollPane();
        brainTab = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        selectAnim = new javax.swing.JComboBox<String>();
        showGrid = new javax.swing.JCheckBox();
        showModel = new javax.swing.JCheckBox();
        rotateButton = new javax.swing.JToggleButton();
        resetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        this.addWindowListener(new WindowAdapter()
        {
            @Override
            public void windowClosing(WindowEvent e)
            {
                app.stop(true);
                app.terminate();
                super.windowClosing(e);
            }
        });

        setTitle("Agent Specification Tool");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });

        jLabel1.setLabelFor(agentType);
        jLabel1.setText("Agent Type:");

        agentType.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentTypeActionPerformed(evt);
            }
        });

        agentSpecName.setColumns(20);
        agentSpecName.setRows(1);
        agentSpecName.setTabSize(4);
        agentSpecName.setText("Agent file Name here");
        agentSpecName.setToolTipText("Agent file Name here");
        jScrollPane1.setViewportView(agentSpecName);

        myTabs.addTab("Model Attributes", modelTab);
        myTabs.addTab("Agent Actions", actionsTab);
        myTabs.addTab("Physical Attributes", physicalTab);
        myTabs.addTab("Brain Attributes", brainTab);

        jPanel1.setPreferredSize(new java.awt.Dimension(1024, 768));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 1024, Short.MAX_VALUE));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 768, Short.MAX_VALUE));

        jLabel2.setLabelFor(selectAnim);
        jLabel2.setText("Select Animation:");
        jPanel2.add(jLabel2);

        selectAnim.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "No animation" }));
        selectAnim.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                selectAnimActionPerformed(evt);
            }
        });
        jPanel2.add(selectAnim);

        showGrid.setSelected(true);
        showGrid.setText("Show Grid");
        showGrid.setToolTipText("Show Grid");
        showGrid.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                showGridActionPerformed(evt);
            }
        });
        jPanel2.add(showGrid);

        showModel.setSelected(true);
        showModel.setText("Show Model");
        showModel.setToolTipText("Show Model");
        showModel.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                showModelActionPerformed(evt);
            }
        });
        jPanel2.add(showModel);

        rotateButton.setText("Rotate Model");
        rotateButton.setToolTipText("Rotate Model");
        rotateButton.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rotateButtonActionPerformed(evt);
            }
        });
        jPanel2.add(rotateButton);

        resetButton.setText("Reset View");
        resetButton.setToolTipText("Reset View");
        resetButton.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                resetButtonActionPerformed(evt);
            }
        });
        jPanel2.add(resetButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup().addContainerGap().addGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(myTabs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE,
                                357, Short.MAX_VALUE).addGroup(
                                layout.createSequentialGroup().addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(agentType, 0, 262,
                                        Short.MAX_VALUE)).addGroup(
                                layout.createSequentialGroup().addGroup(
                                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(openButton,
                                                javax.swing.GroupLayout.Alignment.TRAILING)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(agentSpecBox, 0, 300, Short.MAX_VALUE).addComponent(jScrollPane1,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                                layout.createSequentialGroup().addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1012, Short.MAX_VALUE).addGap(24, 24, 24)).addGroup(
                                layout.createSequentialGroup().addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()))));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup().addContainerGap().addGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(
                                javax.swing.GroupLayout.Alignment.LEADING,
                                layout.createSequentialGroup().addGroup(
                                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(openButton).addComponent(agentSpecBox,
                                                javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(
                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(saveButton)).addPreferredGap(
                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(agentType, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(
                                        myTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)).addGroup(
                                layout.createSequentialGroup().addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        Short.MAX_VALUE).addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addContainerGap()));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectAnimActionPerformed(java.awt.event.ActionEvent evt)
    {// GEN-FIRST:event_selectAnimActionPerformed
        if(selectAnim.getSelectedItem().equals("No animation"))
        {
            app.setAnimation(null);
        }
        else
        {
            app.setAnimation((String) selectAnim.getSelectedItem());
        }
    }// GEN-LAST:event_selectAnimActionPerformed

    private void showGridActionPerformed(java.awt.event.ActionEvent evt)
    {// GEN-FIRST:event_showGridActionPerformed
        app.isGridVisible(showGrid.isSelected());
    }// GEN-LAST:event_showGridActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt)
    {// GEN-FIRST:event_openButtonActionPerformed
        populateTabs("open");
    }// GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)
    {// GEN-FIRST:event_saveButtonActionPerformed
        savePressed();
    }// GEN-LAST:event_saveButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt)
    {// GEN-FIRST:event_resetButtonActionPerformed
        rotateButton.setText("Rotate Model");
        rotateButton.setSelected(false);
        showGrid.setSelected(true);
        showModel.setSelected(true);
        selectAnim.setSelectedIndex(0);
        app.resetView();
    }// GEN-LAST:event_resetButtonActionPerformed

    private void rotateButtonActionPerformed(java.awt.event.ActionEvent evt)
    {// GEN-FIRST:event_rotateButtonActionPerformed
        if(rotateButton.getText().equals("Rotate Model"))
        {
            app.isRotating(true);
            rotateButton.setText("Stop Model");
        }
        else
        {
            app.isRotating(false);
            rotateButton.setText("Rotate Model");
        }
    }// GEN-LAST:event_rotateButtonActionPerformed

    private void showModelActionPerformed(java.awt.event.ActionEvent evt)
    {// GEN-FIRST:event_showModelActionPerformed
        app.isNodeVisible(showModel.isSelected());
    }// GEN-LAST:event_showModelActionPerformed

    private void agentTypeActionPerformed(java.awt.event.ActionEvent evt)
    {// GEN-FIRST:event_agentTypeActionPerformed
        if(populating == false)
        {
            populateTabs("notopen");
        }
    }// GEN-LAST:event_agentTypeActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)
    {// GEN-FIRST:event_formWindowClosing
        app.stop();
    }// GEN-LAST:event_formWindowClosing

    *//**
     * Instantiates the jME3 application appClass and gets a canvas from it.
     *//*
    private void initCanvas()
    {
        AppSettings settings = new AppSettings(true);
        settings.setWidth(jPanel1.getWidth());
        settings.setHeight(jPanel1.getHeight());

        app.setPauseOnLostFocus(false);
        app.setSettings(settings);
        app.createCanvas();
        app.startCanvas();

        Canvas canvas = ((JmeCanvasContext) app.getContext()).getCanvas();
        canvas.setSize(settings.getWidth(), settings.getHeight());

        jPanel1.add(canvas, BorderLayout.CENTER);
    }

    public void init()
    {
        inputs = new Vector<Inputbox>();

        agentAttrHashMap = new HashMap<String, AgentAttribute>();

        metaSpecFolder = new File(System.getProperty("user.home") + System.getProperty("file.separator") + "Divas" + System.getProperty("file.separator") + "metaagentspecs"
                + System.getProperty("file.separator"));
        agentSpecFolder = new File(System.getProperty("user.home") + System.getProperty("file.separator") + "Divas" + System.getProperty("file.separator") + "agentspecs"
                + System.getProperty("file.separator"));

        if(!agentSpecFolder.isDirectory())
        {
            try
            {
                throw new Exception("Agent folder doesn't exist");
            }
            catch(Exception e1)
            {
                e1.printStackTrace();
            }
        }

        if(!metaSpecFolder.isDirectory())
        {
            try
            {
                throw new Exception("Meta Agent folder doesn't exist");
            }
            catch(Exception e1)
            {
                e1.printStackTrace();
            }
        }

        metaAgentTypes.clear();

        updateAgentTypeBox();
        updateAgentSpecBox();
        populateTabs("notopen");

        initCanvas();

        try
        {
            Thread.sleep(2000);
        }
        catch(InterruptedException ex)
        {
            Logger.getLogger(AgentSpecFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        for(String anim : app.getAnimationList())
        {
            selectAnim.addItem(anim);
        }
    }

    void updateAgentTypeBox()
    {
        agentType.removeAll();
        agentType.removeAllItems();
        metaAgentTypes.clear();
        metaSpecDocs.clear();
        agentType.setFocusable(false);
        // agentType.addItem("Human");
        // agentType.addItem("Cat");
        // agentType.addItem("Car");

        try
        {
            File files[];
            files = ResourceManager.getFiles(metaSpecFolder, "agentmold");

            for(File f : files)
            {

                try
                {
                    MetaAgentDocument mad = MetaAgentDocument.Factory.parse(f);
                    MetaAgent testma = mad.getMetaAgent();
                    metaSpecDocs.put(testma.getName(), mad);

                    agentType.addItem(testma.getName());
                    metaAgentTypes.put(testma.getName(), testma);

                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }

            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    private void updateAgentSpecBox()
    {

        agentSpecBox.removeAll();
        agentSpecBox.removeAllItems();
        agentSpecBoxList.clear();
        agentSpecsDocs.clear();
        agentSpecBox.setFocusable(false);
        // agentType.addItem("Human");
        // agentType.addItem("Cat");
        // agentType.addItem("Car");

        try
        {
            File files[];
            files = ResourceManager.getFiles(agentSpecFolder, "agentspec");

            for(File f : files)
            {

                try
                {
                    AgentSpecDocument ad = AgentSpecDocument.Factory.parse(f);
                    AgentSpec testas = ad.getAgentSpec();
                    agentSpecsDocs.put(testas.getName(), ad);

                    agentSpecBox.addItem(testas.getName());
                    agentSpecBoxList.put(testas.getName(), testas);

                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }

            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    protected void populateTabs(String open)
    {
        populating = true;
        try
        {

            myTabs.remove(physicalTab);
            myTabs.remove(brainTab);
            myTabs.remove(modelTab);
            myTabs.remove(actionsTab);

            physicalTab = new JScrollPane();
            brainTab = new JScrollPane();
            modelTab = new JScrollPane();
            actionsTab = new JScrollPane();

            // physicalTab.setLayout(new BoxLayout(physicalTab,
            // BoxLayout.PAGE_AXIS));

            myTabs.addTab("Physical Attributes", physicalTab);
            myTabs.addTab("Brain Attributes", brainTab);
            myTabs.addTab("Model Attributes", modelTab);
            myTabs.addTab("Agent Actions", actionsTab);

            // TOBE set dynamically later
            JPanel ptemp = new JPanel();
            JPanel pparent = new JPanel();
            pparent.removeAll();
            pparent.setLayout(new GridLayout(0, 3));
            ptemp.add(pparent);
            JPanel btemp = new JPanel();
            JPanel bparent = new JPanel();
            bparent.setLayout(new GridLayout(0, 3));
            btemp.add(bparent);
            JPanel mtemp = new JPanel();
            JPanel mparent = new JPanel();
            mparent.setLayout(new GridLayout(0, 3));
            mtemp.add(mparent);
            JPanel atemp = new JPanel();
            JPanel aparent = new JPanel();
            aparent.setLayout(new GridLayout(0, 3));
            atemp.add(aparent);

            physicalTab.setViewportView(ptemp);
            brainTab.setViewportView(btemp);
            modelTab.setViewportView(mtemp);
            actionsTab.setViewportView(atemp);

            // physicalTab.removeAll();
            MetaAgent selectedMeta = metaAgentTypes.get(agentType.getSelectedItem());

            if(selectedMeta != null)
            {
                inputBoxes.clear();
                if(open.equals("open"))
                {
                    AgentSpec agentSpec = agentSpecBoxList.get(agentSpecBox.getSelectedItem());
                    AgentAttribute[] agentAttributes = agentSpec.getAgentAttributeArray();

                    agentType.setSelectedItem(agentSpec.getMetaname());
                    agentSpecName.setText(agentSpec.getName());

                    agentAttrHashMap.clear();

                    for(AgentAttribute aa : agentAttributes)
                    {
                        agentAttrHashMap.put(aa.getName(), aa);
                    }

                    fillDivasAttributePanelOpen(pparent, bparent);
                }
                else
                {
                    fillDivasAttributePanel(selectedMeta, 0, pparent, bparent);
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        populating = false;
    }

    private void fillDivasAttributePanel(MetaAgent metaAgent, int depth, JPanel pparent, JPanel mparent)
    {

        inputs.clear();

        String parentName = metaAgent.getParent();
        if(!parentName.equals(""))
        {
            MetaAgentDocument metaDoc = metaSpecDocs.get(parentName);
            fillDivasAttributePanel(metaDoc.getMetaAgent(), depth + 1, pparent, mparent);
        }

        DivasAttribute[] agentAttributes = metaAgent.getDivasAttributeArray();

        for(DivasAttribute aa : agentAttributes)
        {
            // Adding Physical attributes
            if(aa.getCategory().equals(DivasAttribute.Category.PHYSICAL))
            {
                if(aa.getType().equals(DivasAttributeType.Vector.toString()))
                {
                    Inputbox input;
                    input = new Inputbox(aa.getName() + "-X", aa.getDefaultx(), "", pparent);
                    inputBoxes.put(input.name, aa);
                    inputs.add(input);
                    Inputbox input2;
                    input2 = new Inputbox(aa.getName() + "-Y", aa.getDefaulty(), "", pparent);
                    inputBoxes.put(input2.name, aa);
                    inputs.add(input2);
                    Inputbox input3;
                    input3 = new Inputbox(aa.getName() + "-Z", aa.getDefaultz(), "", pparent);
                    inputBoxes.put(input3.name, aa);
                    inputs.add(input3);
                }
                else
                {
                    addInput(aa, pparent);
                }
                // Adding Mental/Brain attributes
            }
            else if(aa.getCategory().equals(DivasAttribute.Category.MENTAL))
            {
                if(aa.getType().equals(DivasAttributeType.Vector.toString()))
                {
                    Inputbox input;
                    input = new Inputbox(aa.getName() + "-X", aa.getDefaultx(), "", mparent);
                    inputBoxes.put(input.name, aa);
                    inputs.add(input);
                    Inputbox input2;
                    input2 = new Inputbox(aa.getName() + "-Y", aa.getDefaulty(), "", mparent);
                    inputBoxes.put(input2.name, aa);
                    inputs.add(input2);
                    Inputbox input3;
                    input3 = new Inputbox(aa.getName() + "-Z", aa.getDefaultz(), "", mparent);
                    inputBoxes.put(input3.name, aa);
                    inputs.add(input3);
                }
                else
                {
                    addInput(aa, mparent);
                }
            }
        }
        this.validate();
    }

    private void addInput(DivasAttribute aa, JPanel pparent)
    {
        Inputbox input = new Inputbox(aa.getName(), aa.getDefault(), aa.getUnit(), pparent);
        inputBoxes.put(input.name, aa);
        inputs.add(input);
    }

    private void fillDivasAttributePanelOpen(JPanel pparent, JPanel mparent)
    {

        inputs.clear();

        for(AgentAttribute aa : agentSpecBoxList.get(agentSpecBox.getSelectedItem()).getAgentAttributeArray())
        {

            // Adding Physical attributes
            if(aa.getCategory().equals(AgentAttribute.Category.PHYSICAL))
            {
                if(aa.getType().equals(DivasAttributeType.Vector.toString()))
                {
                    Inputbox input;
                    input = new Inputbox(aa.getName() + "-X", aa.getValuex(), "", pparent);
                    inputBoxes.put(input.name, aa);
                    inputs.add(input);
                    Inputbox input2;
                    input2 = new Inputbox(aa.getName() + "-Y", aa.getValuey(), "", pparent);
                    inputBoxes.put(input2.name, aa);
                    inputs.add(input2);
                    Inputbox input3;
                    input3 = new Inputbox(aa.getName() + "-Z", aa.getValuez(), "", pparent);
                    inputBoxes.put(input3.name, aa);
                    inputs.add(input3);
                }
                else
                {
                    addInput(aa, pparent);
                }
                // Adding Mental/Brain attributes
            }
            else if(aa.getCategory().equals(AgentAttribute.Category.MENTAL))
            {
                if(aa.getType().equals(DivasAttributeType.Vector.toString()))
                {
                    Inputbox input;
                    input = new Inputbox(aa.getName() + "-X", aa.getValuex(), "", mparent);
                    inputBoxes.put(input.name, aa);
                    inputs.add(input);
                    Inputbox input2;
                    input2 = new Inputbox(aa.getName() + "-Y", aa.getValuey(), "", mparent);
                    inputBoxes.put(input2.name, aa);
                    inputs.add(input2);
                    Inputbox input3;
                    input3 = new Inputbox(aa.getName() + "-Z", aa.getValuez(), "", mparent);
                    inputBoxes.put(input3.name, aa);
                    inputs.add(input3);
                }
                else
                {
                    addInput(aa, mparent);
                }
            }
        }
        this.validate();
    }

    private void addInput(AgentAttribute aa, JPanel pparent)
    {
        Inputbox input = new Inputbox(aa.getName(), aa.getValue(), aa.getUnit(), pparent);
        inputBoxes.put(input.name, aa);
        inputs.add(input);
    }

    @Override
    public void setVisible(boolean b)
    {
        super.setVisible(b);
        this.setState(Frame.NORMAL);
    }

    private void savePressed()
    {

        asDoc = AgentSpecDocument.Factory.newInstance();
        as = asDoc.addNewAgentSpec();

        MetaAgent selectedMeta = metaAgentTypes.get(agentType.getSelectedItem());

        as.setName(agentSpecName.getText());
        as.setMetaname(selectedMeta.getName());

        for(int i = 0; i < inputs.size(); i++)
        {
            Inputbox curInputBox = inputs.get(i);

            if(inputBoxes.get(curInputBox.name) instanceof DivasAttribute)
            {
                DivasAttribute curDA = null;
                curDA = (DivasAttribute) inputBoxes.get(curInputBox.name);
                AgentAttribute atri = as.addNewAgentAttribute();
                atri.setName(curDA.getName());
                atri.setUnit(curDA.getUnit());
                atri.setType(curDA.getType());

                if(curDA.getCategory().toString().equals(DivasAttribute.Category.PHYSICAL.toString()))
                {
                    atri.setCategory(AgentAttribute.Category.PHYSICAL);
                }
                else
                {
                    atri.setCategory(AgentAttribute.Category.MENTAL);
                }

                if(curDA.getType().equals(DivasAttributeType.Vector.toString()))
                {
                    atri.setValuex(curInputBox.input.getText());
                    i++;
                    curInputBox = inputs.get(i);
                    atri.setValuey(curInputBox.input.getText());
                    i++;
                    curInputBox = inputs.get(i);
                    atri.setValuez(curInputBox.input.getText());
                }
                else
                {
                    atri.setValue(curInputBox.input.getText());
                }
            }
            else
            {
                AgentAttribute curAA = (AgentAttribute) inputBoxes.get(curInputBox.name);
                AgentAttribute atri = as.addNewAgentAttribute();
                atri.setName(curAA.getName());
                atri.setUnit(curAA.getUnit());
                atri.setType(curAA.getType());

                if(curAA.getCategory().toString().equals(AgentAttribute.Category.PHYSICAL.toString()))
                {
                    atri.setCategory(AgentAttribute.Category.PHYSICAL);
                }
                else
                {
                    atri.setCategory(AgentAttribute.Category.MENTAL);
                }

                if(curAA.getType().equals(DivasAttributeType.Vector.toString()))
                {
                    atri.setValuex(curInputBox.input.getText());
                    i++;
                    curInputBox = inputs.get(i);
                    atri.setValuey(curInputBox.input.getText());
                    i++;
                    curInputBox = inputs.get(i);
                    atri.setValuez(curInputBox.input.getText());
                }
                else
                {
                    atri.setValue(curInputBox.input.getText());
                }
            }
        }

        addtasks(as, selectedMeta);

        // XmlOptions().setSavePrettyPrint().setSavePrettyPrintIndent(4)));

        File savefile = new File(agentSpecFolder + System.getProperty("file.separator") + as.getName() + ".agentspec");

        try
        {
            asDoc.save(savefile, new XmlOptions().setSavePrettyPrint().setSavePrettyPrintIndent(4));
        }
        catch(IOException e)
        {
            e.printStackTrace();
        }
        asDoc.xmlText(new XmlOptions().setSavePrettyPrint().setSavePrettyPrintIndent(4));

        refreshList();
    }

    private void addtasks(AgentSpec as2, MetaAgent selectedMeta)
    {

        String parentName = selectedMeta.getParent();

        DivasTask[] dts = selectedMeta.getDivasTaskArray();
        for(int i = 0; i < dts.length; i++)
        {
            DivasTask dt = as2.addNewDivasTask();
            dt.set(dts[i].copy());
        }

        if(!parentName.equals(""))
        {
            MetaAgentDocument mmm = metaSpecDocs.get(parentName);
            addtasks(as2, mmm.getMetaAgent());
        }

    }

    private void refreshList()
    {
        updateAgentSpecBox();
        updateAgentTypeBox();
        populateTabs("notopen");
    }

    *//**
     * @param args
     *        the command line arguments
     *//*
    public static void main(String args[])
    {
         Set the Nimbus look and feel 
        // <editor-fold defaultstate="collapsed"
        // desc=" Look and feel setting code (optional) ">
        
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. For details see
         * http://download.oracle.com/javase /tutorial/uiswing/lookandfeel/plaf.html
         
        try
        {
            for(javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {

                if("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch(ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(AgentSpecFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(AgentSpecFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(AgentSpecFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(AgentSpecFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

         Create and display the form 
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            @Override
            public void run()
            {
                AgentSpecFrame asf = new AgentSpecFrame();
                asf.init();
                asf.pack();
                asf.setLocationRelativeTo(null);
                asf.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane       actionsTab;
    private javax.swing.JComboBox<String> agentSpecBox;
    private javax.swing.JTextArea         agentSpecName;
    private javax.swing.JComboBox<String> agentType;
    private javax.swing.JScrollPane       brainTab;
    private javax.swing.JLabel            jLabel1;
    private javax.swing.JLabel            jLabel2;
    private javax.swing.JPanel            jPanel1;
    private javax.swing.JPanel            jPanel2;
    private javax.swing.JScrollPane       jScrollPane1;
    private javax.swing.JScrollPane       modelTab;
    private javax.swing.JTabbedPane       myTabs;
    private javax.swing.JButton           openButton;
    private javax.swing.JScrollPane       physicalTab;
    private javax.swing.JButton           resetButton;
    private javax.swing.JToggleButton     rotateButton;
    private javax.swing.JButton           saveButton;
    private javax.swing.JComboBox<String> selectAnim;
    private javax.swing.JCheckBox         showGrid;
    private javax.swing.JCheckBox         showModel;
    // End of variables declaration//GEN-END:variables
}
*/